
interface IEventHandler {
  func handle(virtual self &IEventHandler);
}

interface IEvent { }

struct Event {
  id int;
}

func trigger(self &Event) {
  self.handler.handle();
}

struct GameToDominoConnection {
  commands! List<IDominoCommand>;
  next_id! i64;
  events HashMap<int, Event, IntHasher, IntEquator>;
}

func GameToDominoConnection() GameToDominoConnection {
  GameToDominoConnection(
    List<IDominoCommand>(),
    1i64,
    HashMap<int, Event, IntHasher, IntEquator>(
      IntHasher(), IntEquator()))
}

func MakePanel(
    self &GameToDominoConnection,
    panelGXInScreen int,
    panelGYInScreen int,
    panelGW int,
    panelGH int)
i64 {
  id = self.next_id;
  set self.next_id = self.next_id + 1i64;
  self.commands.add(MakePanelCommand(id, panelGXInScreen, panelGYInScreen, panelGW, panelGH));
  ret id;
  // ret Panel(this, id, panelGW, panelGH);
}

//     public IEvent MakeEvent(IEventHandler handler) {
//       id = self.next_id;
//       set self.next_id = self.next_id + 1i64;
//       var e = Event(id, handler);
//       events.Add(id, e);
//       ret e;
//     }
//     public Event DestroyEvent(IEvent ie) {
//       var e = ie as Event;
//       Asserts.Assert(e != null);
//       events.Remove(e.id);
//       e.Dispose();
//       ret e;
//     }

//     func TriggerEvent(i64 id) {
//       if (events.TryGetValue(id, out var e)) {
//         e.Trigger();
//       } else {
//         throw Exception("Unknown event triggered: " + id);
//       }
//     }

func CreateTile(self &GameToDominoConnection, initialTile InitialTile) i64 {
  id = self.next_id;
  set self.next_id = self.next_id + 1i64;
  self.commands.add(CreateTileCommand(id, initialTile));
  ret id;
}


func CreateUnit(self &GameToDominoConnection, initialUnit InitialUnit) i64 {
  id = self.next_id;
  set self.next_id = self.next_id + 1i64;
  self.commands.add(CreateUnitCommand(id, initialUnit));
  ret id;
}

func SetupGame(
  self &GameToDominoConnection,
  cameraPosition Vec3i,
  lookatOffsetToCamera Vec3i,
  elevationStepHeight int,
  pattern Pattern)
{
  self.commands.add(SetupGameCommand(cameraPosition, lookatOffsetToCamera, elevationStepHeight, pattern));
}

func MoveCamera(
  self &GameToDominoConnection,
  cameraPosition Vec3i,
  lookatOffsetToCamera Vec3i,
  duration int)
{
  self.commands.add(MoveCameraCommand(cameraPosition, lookatOffsetToCamera, duration));
}

func ScheduleClose(self &GameToDominoConnection, viewId i64, startMsFromNow i64) {
  self.commands.add(ScheduleCloseCommand(viewId, startMsFromNow));
}

func RemoveView(self &GameToDominoConnection, viewId i64) {
  self.commands.add(RemoveViewCommand(viewId));
}

//     func SetOpacity(i64 viewId, int id, int percent) {
//       self.commands.add(SetOpacityCommand(viewId, id, percent));
//     }

func SetFadeOut(self &GameToDominoConnection, id i64, fadeOut FadeOut) {
  self.commands.add(SetFadeOutCommand(id, fadeOut));
}

func SetFadeIn(self &GameToDominoConnection, id i64, fadeIn FadeIn) {
  self.commands.add(SetFadeInCommand(id, fadeIn));
}

func UnitHpChanged(self &GameToDominoConnection, id i64, hp int) {
  self.commands.add(UnitHpChangedCommand(id, hp));
}

func AddString(
    self &GameToDominoConnection,
    parentViewId i64,
    x int,
    y int,
    maxWide int,
    color Vec4i,
    fontName str,
    s StrSlice)
[]i64 {
  newViewIds = List<i64>();
  foreach i in range(0, s.len()) {
    unicode = s.charAt(i).toAscii();
    newViewIds.add(self.AddSymbol(parentViewId, x + i, y, 1, 1, color, SymbolId(fontName, unicode), true));
  }
  ret (newViewIds).toArray();
}

//     public i64 AddButton(
//         i64 parentViewId,
//         int x,
//         int y,
//         int width,
//         int height,
//         int z,
//         Vec4i color,
//         Vec4i borderColor,
//         Vec4i pressedColor,
//         IEvent onClickedI,
//         IEvent onMouseInI,
//         IEvent onMouseOutI) {
//       var onClicked = onClickedI as Event;
//       Asserts.Assert(onClicked != null);
//       var onMouseIn = onMouseInI as Event;
//       Asserts.Assert(onMouseIn != null);
//       var onMouseOut = onMouseOutI as Event;
//       Asserts.Assert(onMouseOut != null);
      
// id = self.next_id;
//  set self.next_id = self.next_id + 1i64;
//       self.commands.add(
//           AddButtonCommand(
//               newViewId, parentViewId, x, y, width, height, z, color, borderColor, pressedColor, onClicked.id,
//               onMouseIn.id, onMouseOut.id));
//       ret newViewId;
//     }

//     // public i64 AddFullscreenRect(i64 parentViewId, Color color) {
// id = self.next_id;
//  set self.next_id = self.next_id + 1i64;
//     //   self.commands.add(AddFullscreenRectCommand(newViewId, parentViewId, color));
//     //   ret newViewId;
//     // }

func AddRectangle(
    self &GameToDominoConnection,
    parentViewId i64,
    x int,
    y int,
    width int,
    height int,
    z int,
    color Vec4i,
    borderColor Vec4i)
i64 {
  newViewId = self.next_id;
  set self.next_id = self.next_id + 1i64;
  self.commands.add(
      AddRectangleCommand(newViewId, parentViewId, x, y, width, height, z, color, borderColor));
  ret newViewId;
}

func AddSymbol(
    self &GameToDominoConnection,
    parentViewId i64,
    x int,
    y int,
    size int,
    z int,
    color Vec4i,
    symbol SymbolId,
    centered bool)
i64 {
  newViewId = self.next_id;
  set self.next_id = self.next_id + 1i64;
  self.commands.add(AddSymbolCommand(newViewId, parentViewId, x, y, size, z, color, symbol, centered));
  ret newViewId;
}

//     func ShowPrism(i64 tileViewId, InitialSymbol prismDescription, InitialSymbol prismOverlayDescription) {
//       self.commands.add(ShowPrismCommand(tileViewId, prismDescription, prismOverlayDescription));
//     }
//     func FadeInThenOut(i64 tileViewId, long inDurationMs, long outDurationMs) {
//       self.commands.add(FadeInThenOutCommand(tileViewId, inDurationMs, outDurationMs));
//     }
//     func ShowRune(i64 tileViewId, InitialSymbol runeSymbolDescription) {
//       self.commands.add(ShowRuneCommand(tileViewId, runeSymbolDescription));
//     }
func SetOverlay(self &GameToDominoConnection, tileViewId i64, maybeOverlay Opt<InitialSymbol>) {
  self.commands.add(SetOverlayCommand(tileViewId, maybeOverlay));
}
func SetFeature(self &GameToDominoConnection, tileViewId i64, maybeFeature Opt<InitialSymbol>) {
  self.commands.add(SetFeatureCommand(tileViewId, maybeFeature));
}
func SetSurfaceColor(self &GameToDominoConnection, tileViewId i64, frontColor Vec4iAnimation) {
  self.commands.add(SetSurfaceColorCommand(tileViewId, frontColor));
}
func SetCliffColor(self &GameToDominoConnection, tileViewId i64, cliffColor Vec4iAnimation) {
  self.commands.add(SetCliffColorCommand(tileViewId, cliffColor));
}
func SetElevation(self &GameToDominoConnection, tileViewId i64, elevation int) {
  self.commands.add(SetElevationCommand(tileViewId, elevation));
}
func RemoveItem(self &GameToDominoConnection, tileViewId i64, id i64) {
  self.commands.add(RemoveItemCommand(tileViewId, id));
}
func ClearItems(self &GameToDominoConnection, tileViewId i64) {
  self.commands.add(ClearItemsCommand(tileViewId));
}
func AddItem(self &GameToDominoConnection, tileViewId i64, itemId i64, symbolDescription InitialSymbol) {
  self.commands.add(AddItemCommand(tileViewId, itemId, symbolDescription));
}
func DestroyTile(self &GameToDominoConnection, tileViewId i64) {
  self.commands.add(DestroyTileCommand(tileViewId));
}

func DestroyUnit(self &GameToDominoConnection, unitViewId i64) {
  self.commands.add(DestroyUnitCommand(unitViewId));
}

func UnitHopTo(self &GameToDominoConnection, unitViewId i64, destination Location, newElevation int, duration int) {
  self.commands.add(UnitHopToCommand(unitViewId, destination, newElevation, duration));
}

func UnitFade(self &GameToDominoConnection, unitViewId i64, duration int) {
  self.commands.add(UnitFadeCommand(unitViewId, duration));
}

func UnitLunge(self &GameToDominoConnection, unitViewId i64, target Location, duration int) {
  self.commands.add(UnitLungeCommand(unitViewId, target, duration));
}

func Timer(self &GameToDominoConnection, duration int, tag i64) {
  self.commands.add(TimerCommand(duration, tag));
}

func TakeCommands(self &GameToDominoConnection) Array<mut, JsonNode> {
  old_commands = set self.commands = List<IDominoCommand>();
  ret Array<mut, JsonNode>(
    old_commands.len(),
    &{ old_commands.get(_).JsonNode() });
}
