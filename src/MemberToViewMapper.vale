//public interface IDescriptionVisitor {
//  void visitTileTopColor(TopColorDescriptionForIDescription color);
//  void visitTileSideColor(SideColorDescriptionForIDescription color);
//  void visitTileOverlay(OverlayDescriptionForIDescription symbol);
//  void visitTileFeature(FeatureDescriptionForIDescription symbol);
//  void visitUnitDominoShape(DominoShapeDescriptionForIDescription domino);
//  void visitUnitFace(DominoFaceDescriptionForIDescription symbol);
//  void visitUnitDetail(DetailDescriptionForIDescription symbol);
//  void visitTileItem(ItemDescriptionForIDescription symbol);
//}

interface IDescription { }

impl IDescription for TopColorDescriptionForIDescription;
struct TopColorDescriptionForIDescription {
  color Vec4iAnimation;
}
impl IDescription for SideColorDescriptionForIDescription;
struct SideColorDescriptionForIDescription {
  color Vec4iAnimation;
}
//impl IDescription for OutlineColorDescriptionForIDescription;
//struct OutlineColorDescriptionForIDescription {
//  color Color;
//}
impl IDescription for OverlayDescriptionForIDescription;
struct OverlayDescriptionForIDescription {
  symbol InitialSymbol;
}
impl IDescription for FeatureDescriptionForIDescription;
struct FeatureDescriptionForIDescription {
  symbol InitialSymbol;
}
impl IDescription for DominoFaceDescriptionForIDescription;
struct DominoFaceDescriptionForIDescription {
  symbol InitialSymbol;
}
impl IDescription for DominoShapeDescriptionForIDescription;
struct DominoShapeDescriptionForIDescription {
  symbol InitialSymbol;
}
impl IDescription for ItemDescriptionForIDescription;
struct ItemDescriptionForIDescription {
  symbol InitialSymbol;
}
impl IDescription for DetailDescriptionForIDescription;
struct DetailDescriptionForIDescription {
  symbol InitialSymbol;
}

struct MemberToViewMapper {
  entries HashMap<str, List<IDescription>, StrHasher, StrEquator>;
}

func getEntries(self &MemberToViewMapper, name str) &List<IDescription> {
  if not self.entries.ContainsKey(name) {
    panic("No entries for member: " + name);
  }
  ret self.entries.get(name).get("derped j");
}

func MemberToViewMapperLoadMap(
    resourcesPath str,
    filename str)
MemberToViewMapper {
  filePath = Path(resourcesPath) / filename;
  jsonStr = filePath.readAsString();

  entries =
      HashMap<str, List<IDescription>, StrHasher, StrEquator>(
          StrHasher(), StrEquator());

  maybe_root_node = jsonToNode(jsonStr.slice());
  if maybe_root_node.is_err() {
    panic("Couldn't parse vivimap: " + maybe_root_node.expect_err());
  }
  root_node = (maybe_root_node).expect("bork f");

  maybe_root_obj = (root_node).as<JsonObject>();
  if maybe_root_obj.is_err() {
    panic("Request wasn't json object!");
  }
  root_obj = (maybe_root_obj).expect("bork g");

  foreach [memberName, memberNode &JsonNode] in root_obj.fields {

    memberObjResult = memberNode.as<JsonObject>();
    if memberObjResult.is_err() {
      panic("Root member wasn't json object!");
    }
    memberObj = &(memberObjResult).expect("bork h");

    memberEntries =
      if (entries.ContainsKey(memberName)) {
        &entries.get(memberName).get("derped k")
      } else {
        newList = List<IDescription>();
        result = &newList;
        entries.add(memberName, newList);
        result
      };

    maybe_surface_color = memberObj.fields.get("surface_color");
    if (not maybe_surface_color.isEmpty()) {
      surface_color = maybe_surface_color.get("derped l");
      memberEntries.add(TopColorDescriptionForIDescription(ParseColorAnim(&surface_color)));
      //memberObj.fields.remove("surface_color");
    }

    maybe_wall_color = memberObj.fields.get("wall_color");
    if (not maybe_wall_color.isEmpty()) {
      wall_color = maybe_wall_color.get("derped m");
      memberEntries.add(SideColorDescriptionForIDescription(ParseColorAnim(&wall_color)));
      //memberObj.fields.remove("wall_color");
    }

    maybe_overlay = memberObj.fields.get("overlay");
    if (not maybe_overlay.isEmpty()) {
      overlay = maybe_overlay.get("derped n");
      memberEntries.add(OverlayDescriptionForIDescription(ParseInitialSymbol(&overlay)));
      //memberObj.fields.remove("wall_color");
    }

    maybe_feature = memberObj.fields.get("feature");
    if (not maybe_feature.isEmpty()) {
      feature = maybe_feature.get("derped n");
      memberEntries.add(FeatureDescriptionForIDescription(ParseInitialSymbol(&feature)));
      //memberObj.fields.remove("wall_color");
    }

    maybe_item = memberObj.fields.get("item");
    if (not maybe_item.isEmpty()) {
      item = maybe_item.get("derped n");
      memberEntries.add(ItemDescriptionForIDescription(ParseInitialSymbol(&item)));
      //memberObj.fields.remove("wall_color");
    }

    maybe_detail = memberObj.fields.get("detail");
    if (not maybe_detail.isEmpty()) {
      detail = maybe_detail.get("derped n");
      memberEntries.add(DetailDescriptionForIDescription(ParseInitialSymbol(&detail)));
      //memberObj.fields.remove("wall_color");
    }

    maybe_unit = memberObj.fields.get("unit");
    if (not maybe_unit.isEmpty()) {
      unit = &maybe_unit.get("derped n").as<JsonObject>().expect("unit is not an object!");
      faceSymbol =
          ParseInitialSymbol(
              &unit.fields.get("face").get("Unit doesn't have face field!"));
      memberEntries.add(DominoFaceDescriptionForIDescription(faceSymbol));
      dominoSymbol =
          ParseInitialSymbol(
              &unit.fields.get("domino").get("Unit doesn't have domino field!"));
      memberEntries.add(DominoShapeDescriptionForIDescription(dominoSymbol));
      //memberObj.fields.remove("wall_color");
    }

    //if memberObj.fields.len() > 0 {
    //  panic("Unknown key: " + memberObj.fields.KeysIter().next().get());
    //}
  }
  ret MemberToViewMapper(entries);
}
